# 服务器配置
server:
  port: 8080 # 服务运行端口

# Spring 配置
spring:
  config:
    import: classpath:/secret.yml # 引入外部配置文件
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher # 使用 Ant 风格路径匹配
  application:
    name: BlogApplication # 应用名称
  servlet:
    multipart:
      max-request-size: 100MB # 最大请求大小
      max-file-size: 100MB   # 单个文件最大大小

# 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource # 数据源类型
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://${db.host}:3306/blog?serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: ${db.username} # 数据库用户名
    password: ${db.password} # 数据库密码
    druid:
      initial-size: 10        # 初始连接数
      min-idle: 10            # 最小空闲连接数
      max-active: 150         # 最大连接数
      max-wait: 60000         # 获取连接最大等待时间（毫秒）
      time-between-eviction-runs-millis: 60000 # 间隔多久检测空闲连接
      min-evictable-idle-time-millis: 600000   # 连接最小存活时间（毫秒）
      max-evictable-idle-time-millis: 900000   # 连接最大存活时间（毫秒）
      validation-query: SELECT 1 FROM DUAL # 用于检测连接是否有效的SQL
      validation-query-timeout: 500 # 验证查询超时时间（毫秒）
      test-while-idle: true   # 空闲时检测连接有效性
      test-on-borrow: false   # 借用连接时不检测
      test-on-return: false   # 归还连接时不检测

# Redis 配置
  redis:
    host: ${web.adress} # Redis 地址
    port: 6379          # Redis 端口
    password: ${redis.password} # Redis 密码
    timeout: 10s        # 超时时间
    lettuce:
      pool:
        max-active: 150 # 最大连接数
        max-wait: 5s    # 最大等待时间
        max-idle: 100   # 最大空闲连接数
        min-idle: 50    # 最小空闲连接数

# RabbitMQ 配置
  rabbitmq:
    host: ${web.adress}
    port: 5672
    username: wyp
    password: ${rabbitmq.password}
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 3000 # 重试间隔时间（毫秒）
          max-attempts: 3        # 最大重试次数

# 邮件服务配置
  mail:
    host: smtp.qq.com
    username: ${mail.username} # 邮箱账号
    password: ${mail.password} # 授权码

# 博客相关配置
blog:
  url: ${web.adress} # 博客的域名地址，末尾需带/

# 线程池配置
thread:
  pool:
    core-pool-size: 5    # 核心线程数
    max-pool-size: 10    # 最大线程数
    queue-capacity: 50   # 队列容量
    keep-alive-seconds: 1000 # 线程最大空闲时间（秒）

# 文件上传策略
upload:
  strategy: local # 上传策略：local、oss、cos
  local:
    url: https://${web.adress}/ # 本地文件访问URL
    path: /usr/local/upload/    # 本地存储路径
  oss:
    url: https://wangyoupeng-penghong.oss-cn-beijing.aliyuncs.com/
    endpoint: oss-cn-beijing.aliyuncs.com
    bucketName: wangyoupeng-penghong
    accessKeyId: ${oss.accessKeyId}
    accesskeySecret: ${oss.accesskeySecret}

# MyBatis-Plus 配置
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml # Mapper文件路径
  type-aliases-package: com.ican.entity    # 实体类所在包
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # SQL日志输出
    map-underscore-to-camel-case: true # 启用驼峰命名映射
  global-config:
    db-config:
      table-prefix: t_ # 数据库表前缀

# Elasticsearch 配置
elasticsearch:
  username: elastic
  password: changme
  hostname: ${web.adress}
  port: 9200
  scheme: http
  connTimeout: 1000
  socketTimeout: 30000
  connectionRequestTimeout: 5000

# 搜索模式配置
search:
  mode: mysql # 搜索模式，可选值为 elasticsearch 或 mysql

# Sa-Token 配置
sa-token:
  token-name: Authorization      # Token 名称
  token-prefix: Bearer           # Token 前缀
  timeout: 180                   # Token 有效期（秒）
  activity-timeout: -1           # 临时有效期，-1 表示不启用
  auto-renew: false              # 是否自动续签
  is-concurrent: true            # 是否允许账号并发登录
  token-style: uuid              # Token 风格
  is-share: false                # 是否共用 Token
  max-login-count: 20            # 最大登录数量
  is-read-cookie: true           # 是否从 Cookie 读取 Token
  is-read-body: true             # 是否从请求体读取 Token
  is-read-header: true           # 是否从 Header 读取 Token
  is-log: false                  # 是否输出操作日志

# 第三方登录配置
oauth:
  gitee:
    client-id: 0bf9c2fed0f56f2b872a9bf42feefcb81a1d46aaacc12c9774311d681a76ee34
    client-secret: 21fb1592278a838700936b30c0de5ab4e47c9ea74fc998709f2371f501e25d4e
    redirect-url: http://w-love-p.top/oauth/gitee
    access-token-url: https://gitee.com/oauth/token
    user-info-url: https://gitee.com/api/v5/user?access_token={access_token}
  github:
    client-id: Github的client-id
    client-secret: Github的client-secret
    redirect-url: Github回调地址
    access-token-url: https://github.com/login/oauth/access_token
    user-info-url: https://api.github.com/user
  qq:
    app-id: QQ的APPID
    check-token-url: https://graph.qq.com/oauth2.0/me?access_token={access_token}
    user-info-url: https://graph.qq.com/user/get_user_info?openid={openid}&access_token={access_token}&oauth_consumer_key={oauth_consumer_key}

# 验证码配置
captcha:
  prefix: captcha                # Redis 中存储验证码的前缀
  expire:
    default: 10000               # 默认过期时间（毫秒）
    WORD_IMAGE_CLICK: 20000      # 点选验证码过期时间（毫秒）
  init-default-resource: true    # 是否加载系统内置资源
  local-cache-enabled: true      # 是否启用本地缓存
  local-cache-size: 20           # 本地缓存大小
  local-cache-wait-time: 5000    # 拉取缓存等待时间（毫秒）
  local-cache-period: 2000       # 缓存检查周期（毫秒）
  secondary:
    enabled: false               # 是否启用二次验证
    expire: 120000               # 二次验证过期时间（毫秒）
    keyPrefix: captcha:secondary # 二次验证缓存前缀
